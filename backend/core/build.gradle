plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'site.timecapsulearchive'
version = 'DEV-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    maven { url "https://repo.osgeo.org/repository/release/" }
    mavenCentral()
}

jar {
    enabled = false
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //geo data
    implementation 'org.hibernate.orm:hibernate-spatial:6.2.5.Final'

    implementation 'org.geotools:gt-epsg-hsql:29.1'
    implementation 'org.geotools:gt-referencing:29.1'
    implementation 'org.geotools:gt-metadata:29.1'
    implementation 'org.geotools:gt-opengis:29.1'
    implementation 'org.geotools:gt-wfs-ng:29.1'
    implementation 'org.geotools:gt-process:29.1'
    implementation 'org.geotools:gt-transform:29.1'

    //rest template
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.3'

    //flyway
    implementation 'org.flywaydb:flyway-core:9.5.0'
    implementation 'org.flywaydb:flyway-mysql:9.5.0'

    //s3
    implementation 'software.amazon.awssdk:s3:2.21.46'

    //redis
    implementation 'org.springframework.data:spring-data-redis'
    implementation 'io.lettuce:lettuce-core:6.3.0.RELEASE'
    implementation 'org.redisson:redisson-spring-boot-starter:3.30.0'

    //RabbitMQ
    implementation 'org.springframework.boot:spring-boot-starter-amqp'

    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    //OAuth
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    //querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    //swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    //aop
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    //locki
    implementation 'com.github.loki4j:loki-logback-appender:1.4.1'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    testImplementation 'org.flywaydb.flyway-test-extensions:flyway-spring-test:9.5.0'
    testImplementation 'org.testcontainers:testcontainers:1.19.1'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.1'
    testImplementation 'org.testcontainers:mysql:1.19.1'
    testImplementation 'com.redis:testcontainers-redis:2.2.2'
}

tasks.named('test') {
    useJUnitPlatform()
}

def generated = 'src/main/generated'

tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

sourceSets {
    main.java.srcDirs += [generated]
}

clean {
    delete file(generated)
}